(()=>{var e={12:()=>{AFRAME.registerComponent("polygon-wireframe",{schema:{color:{type:"color",default:"grey"},opacity:{type:"number",default:1},hiddenOpacity:{type:"number",default:0},dashed:{type:"boolean",default:!1},dashSize:{type:"number",default:3},gapSize:{type:"number",default:1},dashScale:{type:"number",default:30}},init(){const e=this.el.getObject3D("mesh").geometry;e||console.warn("polygon-wireframe: no base geometry found"),this.edges=new THREE.EdgesGeometry(e)},update(){const e=this.material,t=this.line,i=this.hiddenMaterial,s=this.hiddenLine,a=this.data;if(this.material=this.createLineMaterial(a.color,a.opacity),0!==a.hiddenOpacity&&a.hiddenOpacity!==a.opacity?(this.hiddenMaterial=this.createLineMaterial(a.color,a.hiddenOpacity),a.hiddenOpacity>a.opacity&&(console.warn("Opacity of hidden parts cannot be higher than the opacity of non-hidden parts"),console.warn("Wireframe will be rendered with opacity ",a.hiddenOpacity," as set on hiddenOpacity property."))):this.hiddenMaterial=null,0!==a.hiddenOpacity){const e=this.hiddenMaterial||this.material;e.depthWrite=!1,e.depthTest=!1,e.toneMapped=!1}function n(e,t){e&&e.removeFromParent(),t&&t.dispose()}this.line=new THREE.LineSegments(this.edges,this.material),this.line.computeLineDistances(),this.el.object3D.add(this.line),this.hiddenMaterial&&(this.hiddenLine=new THREE.LineSegments(this.edges,this.hiddenMaterial),this.hiddenLine.computeLineDistances(),this.el.object3D.add(this.hiddenLine)),this.el.getObject3D("mesh").visible=!1,n(t,e),n(s,i)},createLineMaterial(e,t){const i=this.data;let s;return s=i.dashed?new THREE.LineDashedMaterial({color:e,dashSize:i.dashSize,gapSize:i.gapSize,scale:i.dashScale}):new THREE.LineBasicMaterial({color:e}),s.opacity=t,1!==t&&(s.transparent=!0),s},remove(){this.el.getObject3D("mesh").visible=!0,this.material.dispose(),this.line.removeFromParent()}})}},t={};AFRAME.components["polygon-wireframe"]||function i(s){var a=t[s];if(void 0!==a)return a.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}(12),AFRAME.registerComponent("dynamic-snap",{schema:{divergeEvent:{type:"string",default:"mouseGrab"},convergeEvent:{type:"string",default:"mouseRelease"},renderSnap:{type:"string",oneOf:["object","wireframe","transparent","none"],default:"transparent"},renderPrecise:{type:"string",oneOf:["object","wireframe","transparent","none"],default:"object"},wireframeColor:{default:"yellow"},opacity:{default:.5}},init(){this.snapStart=this.snapStart.bind(this),this.snapEnd=this.snapEnd.bind(this),this.diverge=this.diverge.bind(this),this.converge=this.converge.bind(this),this.configureThisEl("object"),this.projectedEl=document.createElement("a-entity"),this.configureProjectedEl(),this.el.sceneEl.appendChild(this.projectedEl),this.snappable=!1,this.diverged=!1,this.hideProjectedObject()},configureProjectedEl(){const e=this.el.getObject3D("mesh");if(e){const t=e.clone(!0);this.projectedEl.setObject3D("mesh",t),this.setMaterials(this.projectedEl,t,this.data.renderSnap)}else this.el.addEventListener("model-loaded",(()=>this.configureProjectedEl()))},configureThisEl(e){const t=this.el.getObject3D("mesh");t?this.setMaterials(this.el,t,e):this.el.addEventListener("model-loaded",(()=>{this.configureThisEl(e)}))},setMaterials(e,t,i){const s=(e,t)=>{const i=e.material;if(!i)return;const s=i.userData.type;if(s)"original"===s?t&&(e.material=i.userData.transparentClone):"transparentClone"===s&&(t||(e.material=i.userData.original));else{i.userData.type="original";const e=i.clone();e.opacity=this.data.opacity,e.transparent=!0,e.userData.type="transparentClone",e.userData.original=i,i.userData.transparentClone=e}};"wireframe"===i?e.setAttribute("polygon-wireframe",{color:this.data.wireframeColor,hiddenOpacity:.2}):e.removeAttribute("polygon-wireframe"),"transparent"===i?t.traverse((e=>{s(e,!0)})):t.traverse((e=>{s(e,!1)})),t.visible="none"!==i&&"wireframe"!==i},addEventListeners(){this.el.addEventListener("snapStart",this.snapStart),this.el.addEventListener("snapEnd",this.snapEnd),this.el.addEventListener(this.data.divergeEvent,this.diverge),this.el.addEventListener(this.data.convergeEvent,this.converge)},removeEventListeners(){this.el.removeEventListener("snapStart",this.snapStart),this.el.removeEventListener("snapEnd",this.snapEnd),this.el.removeEventListener(this.data.divergeEvent,this.diverge),this.el.removeEventListener(this.data.convergeEvent,this.converge)},pause(){this.removeEventListeners()},play(){this.addEventListeners()},snapStart(e){this.snappable=!0,this.diverged&&this.showProjectedObject(e.detail.worldTransform)},snapEnd(e){this.snappable=!1,this.diverged&&this.hideProjectedObject()},showProjectedObject(e){const t=this.projectedEl.object3D;t.position.copy(e.position),t.quaternion.copy(e.quaternion),t.scale.copy(e.scale),t.visible=!0,this.configureThisEl(this.data.renderPrecise)},hideProjectedObject(){this.projectedEl.object3D.visible=!1,this.configureThisEl("object")},diverge(){this.diverged=!0,this.snappable&&this.showProjectedObject(this.projectedEl.object3D)},converge(){if(this.snappable){const e=this.el.object3D,t=e.parent,i=this.projectedEl.object3D;e.matrix.identity(),e.matrix.decompose(e.position,e.quaternion,e.scale),i.add(e),t.attach(e),this.hideProjectedObject(),this.el.emit("snappedTo")}this.diverged=!1}})})();