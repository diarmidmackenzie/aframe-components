(()=>{var e={12:()=>{AFRAME.registerComponent("polygon-wireframe",{schema:{color:{type:"color",default:"grey"},dashed:{type:"boolean",default:!1},dashSize:{type:"number",default:3},gapSize:{type:"number",default:1},dashScale:{type:"number",default:30},onTop:{type:"boolean",default:!1}},init(){const e=this.el.getObject3D("mesh").geometry;e||console.warn("polygon-wireframe: no base geometry found"),this.edges=new THREE.EdgesGeometry(e)},update(){const e=this.material,t=this.line;if(this.data.dashed?this.material=new THREE.LineDashedMaterial({color:this.data.color,dashSize:this.data.dashSize,gapSize:this.data.gapSize,scale:this.data.dashScale}):this.material=new THREE.LineBasicMaterial({color:this.data.color}),this.data.onTop){const e=this.material;e.depthWrite=!1,e.depthTest=!1,e.toneMapped=!1,e.transparent=!0}this.line=new THREE.LineSegments(this.edges,this.material),this.line.computeLineDistances(),this.el.object3D.add(this.line),this.el.getObject3D("mesh").visible=!1,t&&t.removeFromParent(),e&&e.dispose()},remove(){this.el.getObject3D("mesh").visible=!0,this.material.dispose(),this.line.removeFromParent()}})}},t={};(function s(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports})(12),AFRAME.registerComponent("dynamic-snap",{schema:{divergeEvent:{type:"string",default:"mouseGrab"},convergeEvent:{type:"string",default:"mouseRelease"},renderSnap:{type:"string",oneOf:["object","wireframe","transparent","none"],default:"object"},renderPrecise:{type:"string",oneOf:["object","wireframe","transparent","none"],default:"transparent"}},init(){this.snapStart=this.snapStart.bind(this),this.snapEnd=this.snapEnd.bind(this),this.diverge=this.diverge.bind(this),this.converge=this.converge.bind(this),this.configureThisEl("object"),this.projectedEl=document.createElement("a-entity"),this.configureProjectedEl(),this.el.sceneEl.appendChild(this.projectedEl),this.snappable=!1,this.diverged=!1,this.hideProjectedObject()},configureProjectedEl(){const e=this.el.getObject3D("mesh");if(e){const t=e.clone(!0);this.projectedEl.setObject3D("mesh",t),this.setMaterials(this.projectedEl,t,this.data.renderSnap)}else this.el.addEventListener("model-loaded",(()=>this.configureProjectedEl()))},configureThisEl(e){const t=this.el.getObject3D("mesh");t?this.setMaterials(this.el,t,e):this.el.addEventListener("model-loaded",(()=>{this.configureThisEl(e)}))},setMaterials(e,t,s){const i=(e,t)=>{const s=e.material;if(!s)return;const i=s.userData.type;if(i)"original"===i?t&&(e.material=s.userData.transparentClone):"transparentClone"===i&&(t||(e.material=s.userData.original));else{s.userData.type="original";const e=s.clone();e.opacity=.5,e.transparent=!0,e.userData.type="transparentClone",e.userData.original=s,s.userData.transparentClone=e}};"wireframe"===s?e.setAttribute("polygon-wireframe",{color:"yellow",onTop:!0}):e.removeAttribute("polygon-wireframe"),"transparent"===s?t.traverse((e=>{i(e,!0)})):t.traverse((e=>{i(e,!1)})),t.visible="none"!==s&&"wireframe"!==s},addEventListeners(){this.el.addEventListener("snapStart",this.snapStart),this.el.addEventListener("snapEnd",this.snapEnd),this.el.addEventListener(this.data.divergeEvent,this.diverge),this.el.addEventListener(this.data.convergeEvent,this.converge)},removeEventListeners(){this.el.removeEventListener("snapStart",this.snapStart),this.el.removeEventListener("snapEnd",this.snapEnd),this.el.removeEventListener(this.data.divergeEvent,this.diverge),this.el.removeEventListener(this.data.convergeEvent,this.converge)},pause(){this.removeEventListeners()},play(){this.addEventListeners()},snapStart(e){this.snappable=!0,this.diverged&&this.showProjectedObject(e.detail.worldTransform)},snapEnd(e){e.detail.transform,this.snappable=!1},showProjectedObject(e){const t=this.projectedEl.object3D;t.position.copy(e.position),t.quaternion.copy(e.quaternion),t.scale.copy(e.scale),t.visible=!0,this.configureThisEl(this.data.renderPrecise)},hideProjectedObject(){this.projectedEl.object3D.visible=!1,this.configureThisEl("object")},diverge(){this.diverged=!0,this.snappable&&this.showProjectedObject(this.projectedEl.object3D)},converge(){if(this.snappable){const e=this.el.object3D,t=e.parent,s=this.projectedEl.object3D;e.matrix.identity(),e.matrix.decompose(e.position,e.quaternion,e.scale),s.add(e),t.attach(e),this.hideProjectedObject()}this.diverged=!1}})})();