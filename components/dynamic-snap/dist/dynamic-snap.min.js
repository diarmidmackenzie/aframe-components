(()=>{var e={12:()=>{AFRAME.registerComponent("polygon-wireframe",{schema:{color:{type:"color",default:"grey"},dashed:{type:"boolean",default:!1},dashSize:{type:"number",default:3},gapSize:{type:"number",default:1},dashScale:{type:"number",default:30},onTop:{type:"boolean",default:!1}},init(){const e=this.el.getObject3D("mesh").geometry;e||console.warn("polygon-wireframe: no base geometry found"),this.edges=new THREE.EdgesGeometry(e)},update(){const e=this.material,t=this.line;if(this.data.dashed?this.material=new THREE.LineDashedMaterial({color:this.data.color,dashSize:this.data.dashSize,gapSize:this.data.gapSize,scale:this.data.dashScale}):this.material=new THREE.LineBasicMaterial({color:this.data.color}),this.data.onTop){const e=this.material;e.depthWrite=!1,e.depthTest=!1,e.toneMapped=!1,e.transparent=!0}this.line=new THREE.LineSegments(this.edges,this.material),this.line.computeLineDistances(),this.el.object3D.add(this.line),this.el.getObject3D("mesh").visible=!1,t&&t.removeFromParent(),e&&e.dispose()},remove(){this.el.getObject3D("mesh").visible=!0,this.material.dispose(),this.line.removeFromParent()}})}},t={};(function s(i){var a=t[i];if(void 0!==a)return a.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,s),n.exports})(12),AFRAME.registerComponent("dynamic-snap",{schema:{grabEvent:{type:"string",default:"mouseGrab"},releaseEvent:{type:"string",default:"mouseRelease"}},init(){this.snapStart=this.snapStart.bind(this),this.snapEnd=this.snapEnd.bind(this),this.grabbed=this.grabbed.bind(this),this.released=this.released.bind(this),this.projectedEl=document.createElement("a-entity");const e=this.el.getAttribute("geometry");this.projectedEl.setAttribute("geometry",e),this.projectedEl.setAttribute("polygon-wireframe",{color:"yellow",onTop:!0}),this.projectedEl.object3D.visible=!1,this.el.sceneEl.appendChild(this.projectedEl),this.snappable=!1,this.elGrabbed=!1},addEventListeners(){this.el.addEventListener("snapStart",this.snapStart),this.el.addEventListener("snapEnd",this.snapEnd),this.el.addEventListener(this.data.grabEvent,this.grabbed),this.el.addEventListener(this.data.releaseEvent,this.released)},removeEventListeners(){this.el.removeEventListener("snapStart",this.snapStart),this.el.removeEventListener("snapEnd",this.snapEnd),this.el.removeEventListener(this.data.grabEvent,this.grabbed),this.el.removeEventListener(this.data.releaseEvent,this.released)},pause(){this.removeEventListeners()},play(){this.addEventListeners()},snapStart(e){this.snappable=!0,this.elGrabbed&&this.showProjectedObject(e.detail.worldTransform)},snapEnd(e){e.detail.transform,this.snappable=!1},showProjectedObject(e){const t=this.projectedEl.object3D;t.position.copy(e.position),t.quaternion.copy(e.quaternion),t.scale.copy(e.scale),t.visible=!0},hideProjectedObject(){this.projectedEl.object3D.visible=!1},grabbed(){this.elGrabbed=!0,this.snappable&&this.showProjectedObject(this.projectedEl.object3D)},released(){if(this.elGrabbed=!1,this.snappable){const e=this.el.object3D,t=e.parent,s=this.projectedEl.object3D;e.matrix.identity(),e.matrix.decompose(e.position,e.quaternion,e.scale),s.add(e),t.attach(e),this.hideProjectedObject()}}})})();