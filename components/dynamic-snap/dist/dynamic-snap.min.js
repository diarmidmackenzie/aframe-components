(()=>{var e={12:()=>{AFRAME.registerComponent("polygon-wireframe",{schema:{color:{type:"color",default:"grey"},dashed:{type:"boolean",default:!1},dashSize:{type:"number",default:3},gapSize:{type:"number",default:1},dashScale:{type:"number",default:30},onTop:{type:"boolean",default:!1}},init(){const e=this.el.getObject3D("mesh").geometry;e||console.warn("polygon-wireframe: no base geometry found"),this.edges=new THREE.EdgesGeometry(e)},update(){const e=this.material,t=this.line;if(this.data.dashed?this.material=new THREE.LineDashedMaterial({color:this.data.color,dashSize:this.data.dashSize,gapSize:this.data.gapSize,scale:this.data.dashScale}):this.material=new THREE.LineBasicMaterial({color:this.data.color}),this.data.onTop){const e=this.material;e.depthWrite=!1,e.depthTest=!1,e.toneMapped=!1,e.transparent=!0}this.line=new THREE.LineSegments(this.edges,this.material),this.line.computeLineDistances(),this.el.object3D.add(this.line),this.el.getObject3D("mesh").visible=!1,e&&e.dispose(),t&&t.removeFromParent()}})}},t={};(function s(a){var i=t[a];if(void 0!==i)return i.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,s),o.exports})(12),AFRAME.registerComponent("dynamic-snap",{schema:{},events:{snapStart(e){this.snapStart(e)},snapEnd(e){this.snapEnd(e)},snapGrabbed(e){this.grabbed(e)},snapReleased(e){this.released(e)}},init(){this.projectedEl=document.createElement("a-entity");const e=this.el.getAttribute("geometry");this.projectedEl.setAttribute("geometry",e),this.projectedEl.setAttribute("polygon-wireframe",{color:"yellow",onTop:!0}),this.projectedEl.object3D.visible=!1,this.el.sceneEl.appendChild(this.projectedEl),this.snappable=!1},snapStart(e){this.showProjectedObject(e.detail.worldTransform),this.snappable=!0},snapEnd(e){e.detail.transform,this.snappable=!1},showProjectedObject(e){const t=this.projectedEl.object3D;t.position.copy(e.position),t.quaternion.copy(e.quaternion),t.scale.copy(e.scale),t.visible=!0},hideProjectedObject(){this.projectedEl.object3D.visible=!1},grabbed(){this.snappable&&this.showProjectedObject(this.projectedEl.object3D)},released(){if(this.snappable){const e=this.el.object3D,t=e.parent,s=this.projectedEl.object3D;e.matrix.identity(),e.matrix.decompose(e.position,e.quaternion,e.scale),s.add(e),t.attach(e),hideProjectedObject()}}})})();