(()=>{var t={527:()=>{AFRAME.registerComponent("object-parent",{schema:{parent:{type:"selector"}},update(){document.querySelectorAll(`#${parent.id}`).length>1&&console.warn(`object-parent matches duplicate entities for new parent ${parent.id}`);const t=this.data.parent.object3D;this.reparent(t)},remove(){const t=this.el.parentEl;this.reparent(t.object3D)},reparent(t){const e=this.el.object3D,i=e.parent;e.parent!==t&&(objectEl=t=>"Scene"===t.type?this.el.sceneEl:t.el,console.log(`Reparenting ${e.el.id} from ${objectEl(i).id} to ${objectEl(t).id}`),t.attach(e))}})},561:()=>{AFRAME.registerComponent("thumbstick-states",{schema:{controller:{type:"selector",default:"#lhand"},bindings:{type:"array",default:["none","none","none","none"]},tBindings:{type:"array",default:[]},gBindings:{type:"array",default:[]},tgBindings:{type:"array",default:[]},sensitivity:{type:"number",default:.5}},multiple:!0,init(){this.controller=this.data.controller,this.listeners={thumbstickMoved:this.thumbstickMoved.bind(this),triggerUp:this.triggerUp.bind(this),triggerDown:this.triggerDown.bind(this),gripUp:this.gripUp.bind(this),gripDown:this.gripDown.bind(this)},this.states={gripDown:!1,triggerDown:!1}},update(){this.controller.addEventListener("thumbstickmoved",this.listeners.thumbstickMoved),this.controller.addEventListener("triggerup",this.listeners.triggerUp),this.controller.addEventListener("triggerdown",this.listeners.triggerDown),this.controller.addEventListener("gripup",this.listeners.gripUp),this.controller.addEventListener("gripdown",this.listeners.gripDown),this.updateBindings()},updateBindings(){const t=t=>t.forEach((t=>this.el.removeState(t)));var e;t(this.data.bindings),t(this.data.tBindings),t(this.data.gBindings),t(this.data.tgBindings),e=this.states.triggerDown||this.states.gripDown?this.states.triggerDown&&!this.states.gripDown?t=>this.data.tBindings[t]||this.data.bindings[t]:!this.states.triggerDown&&this.states.gripDown?t=>this.data.gBindings[t]||this.data.bindings[t]:t=>this.data.tgBindings[t]||this.data.gBindings[t]||this.data.tBindings[t]||this.data.bindings[t]:t=>this.data.bindings[t],this.yplus=e(0),this.yminus=e(1),this.xplus=e(2),this.xminus=e(3),console.log(this)},gripDown(t){this.states.gripDown=!0,this.updateBindings()},gripUp(t){this.states.gripDown=!1,this.updateBindings()},triggerDown(t){this.states.triggerDown=!0,this.updateBindings()},triggerUp(t){this.states.triggerDown=!1,this.updateBindings()},thumbstickMoved(t){const e=t.detail.x,i=t.detail.y;Math.abs(e)>this.data.sensitivity?e>0?(this.el.addState(this.xplus),this.el.removeState(this.xminus)):(this.el.addState(this.xminus),this.el.removeState(this.xplus)):(this.el.removeState(this.xplus),this.el.removeState(this.xminus)),Math.abs(i)>this.data.sensitivity?i>0?(this.el.addState(this.yplus),this.el.removeState(this.yminus)):(this.el.addState(this.yminus),this.el.removeState(this.yplus)):(this.el.removeState(this.yplus),this.el.removeState(this.yminus))}})}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s](o,o.exports,i),o.exports}(()=>{AFRAME.components["object-parent"]||i(527),AFRAME.components["thumbstick-states"]||i(561);const t=new THREE.Vector3,e=new THREE.Vector3,s=new THREE.Vector3,n=new THREE.Vector3,o=new THREE.Vector3,r=new THREE.Quaternion,a=new THREE.Vector3,h=new THREE.Vector3,d=new THREE.Vector3;AFRAME.registerComponent("laser-manipulation",{schema:{debug:{type:"boolean",default:!1},rotateRate:{type:"number",default:45},center:{type:"string",default:"center",oneOf:["center","contact"]},grabEvents:{type:"boolean",default:!1},grabEvent:{type:"string",default:"laserGrab"},releaseEvent:{type:"string",default:"laserRelease"},controlMethod:{type:"string",default:"parent",oneOf:["parent","transform"]}},update(){this.rotateRate=this.data.rotateRate*Math.PI/180,this.data.debug&&!this.debugAxes?(this.debugAxes=document.createElement("a-entity"),this.debugAxes.setAttribute("debug-axes",""),this.contactPoint.appendChild(this.debugAxes)):this.debugAxes&&(this.debugAxes.parentNode.removeChild(this.debugAxes),this.debugAxes=null)},init(){console.assert(this.el.id),this.moveSpeed=3,this.triggerUp=this.triggerUp.bind(this),this.triggerDown=this.triggerDown.bind(this),this.el.addEventListener("triggerup",this.triggerUp),this.el.addEventListener("triggerdown",this.triggerDown),this.grabbedEl=null,this.contactPoint=document.createElement("a-entity"),this.contactPoint.setAttribute("id",`${this.el.id}-contact-point`),this.el.appendChild(this.contactPoint),this.lastContactPointTransform=new THREE.Object3D},assureUsableId(t){t.id?document.getElementById(t.id)!==t&&console.error(`Element ID for ${t.id} does not unambiguously identify it.  Check for duplicate IDs.`):t.setAttribute("id",Math.random().toString(36).slice(10))},getParentEl(t){const e=t.object3D.parent;return"Scene"===e.type?this.el.sceneEl:e.el},triggerDown(i){console.assert(!this.grabbedEl);const n=this.getIntersections(i.target);if(0===n.length)return;const o=this.getRaycastTarget(n[0]),r=this.el.components.raycaster.getIntersection(n[0]);if(this.originalParentEl||(this.originalParentEl=this.getParentEl(o)),this.assureUsableId(this.originalParentEl),"center"===this.data.center){const t=this.contactPoint.object3D.position;o.object3D.getWorldPosition(t),this.contactPoint.object3D.parent.worldToLocal(t)}else{const t=this.el.object3D.worldToLocal(r.point);this.contactPoint.object3D.position.copy(t)}this.getAxesFromRay(t,e,s),"parent"===this.data.controlMethod?(this.activeControlMethod="parent",o.setAttribute("object-parent","parent",`#${this.el.id}-contact-point`)):(this.activeControlMethod="transform",this.saveContactPointTransform()),this.grabbedEl=o,this.data.grabEvents&&this.grabbedEl.emit(this.data.grabEvent)},getAxesFromRay(t,e,i){i.copy(this.el.components.raycaster.raycaster.ray.direction),this.el.object3D.matrixWorld.extractBasis(o,e,o),e.projectOnPlane(i).normalize(),t.crossVectors(i,e)},triggerUp(){if(this.grabbedEl){if("parent"===this.activeControlMethod&&this.grabbedEl.setAttribute("object-parent","parent",`#${this.originalParentEl.id}`),this.data.grabEvents){const t=this.grabbedEl;setTimeout((()=>{t.emit(this.data.releaseEvent)}))}this.grabbedEl=null,this.activeControlMethod=""}},getIntersections:t=>t.components.raycaster.intersectedEls,moveOut(t){const e=Math.pow(this.moveSpeed,t/1e3);this.contactPoint.object3D.position.multiplyScalar(e)},getRaycastTarget:t=>t.components["raycast-target"]?t.components["raycast-target"].target:t,saveContactPointTransform(){const t=this.lastContactPointTransform;t.quaternion.identity(),t.position.set(0,0,0),t.scale.set(1,1,1),this.contactPoint.object3D.add(t),this.el.sceneEl.object3D.attach(t)},followContactPoint(){const t=this.grabbedEl.object3D;this.lastContactPointTransform.attach(t),this.saveContactPointTransform(),this.originalParentEl.object3D.attach(t)},tick:function(i,n){"transform"===this.activeControlMethod&&this.followContactPoint(),this.el.is("moving-in")?this.moveOut(-n):this.el.is("moving-out")&&this.moveOut(n);const o=n*this.rotateRate/1e3,r=this.contactPoint.object3D;if(this.getAxesFromRay(t,e,s),this.el.is("rotating-y-plus")?this.rotateOnWorldAxis(r,e,o):this.el.is("rotating-y-minus")&&this.rotateOnWorldAxis(r,e,-o),this.el.is("rotating-x-plus")?this.rotateOnWorldAxis(r,t,o):this.el.is("rotating-x-minus")&&this.rotateOnWorldAxis(r,t,-o),this.data.debug){if(this.el.is("rotating-y-plus")||this.el.is("rotating-y-minus")){const t=e;this.contactPoint.setAttribute("debug-axis__y",`direction: ${t.x}, ${t.y}, ${t.z}; color: green`)}else this.contactPoint.removeAttribute("debug-axis__y");if(this.el.is("rotating-x-plus")||this.el.is("rotating-x-minus")){const e=t;this.contactPoint.setAttribute("debug-axis__x",`direction: ${e.x}, ${e.y}, ${e.z}; color: red`)}else this.contactPoint.removeAttribute("debug-axis__x")}},rotateOnWorldAxis(t,e,i){t.getWorldQuaternion(r),r.invert(),n.copy(e),n.applyQuaternion(r),t.rotateOnAxis(n,i)}}),AFRAME.registerComponent("debug-axes",{init(){this.addAxis("red","0 0 0"),this.addAxis("green","0 0 90"),this.addAxis("blue","0 -90 0")},addAxis(t,e){const i=`\n      <a-entity rotation="${e}"\n      line__adjustment-axis="start: -0.1 0 0;\n                              end: 0.1 0 0;\n                              color: ${t}">\n        <a-cone radius-bottom=0.01;\n                radius-top=0;\n                height=0.02;\n                color="${t}";\n                position="0.1 0 0";\n                rotation="0 0 -90">\n        </a-cone>\n      </a-entity>`;this.el.insertAdjacentHTML("beforeend",i)}}),AFRAME.registerComponent("debug-axis",{schema:{direction:{type:"vec3"},color:{type:"color",default:"green"}},multiple:!0,update(){const t=this.el.object3D;t.getWorldPosition(a),h.subVectors(a,this.data.direction),d.addVectors(a,this.data.direction),t.worldToLocal(h),t.worldToLocal(d),this.el.setAttribute("line__axis",`start: ${h.x} ${h.y} ${h.z};\n                            end: ${d.x} ${d.y} ${d.z};\n                            color: ${this.data.color}`)},remove(){this.el.removeAttribute("line__axis")}})})()})();