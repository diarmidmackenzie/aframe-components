(()=>{var t={527:()=>{AFRAME.registerComponent("object-parent",{schema:{parent:{type:"selector"}},update(){document.querySelectorAll(`#${parent.id}`).length>1&&console.warn(`object-parent matches duplicate entities for new parent ${parent.id}`);const t=this.data.parent.object3D;this.reparent(t)},remove(){const t=this.el.parentEl;this.reparent(t.object3D)},reparent(t){const e=this.el.object3D,i=e.parent;e.parent!==t&&(objectEl=t=>"Scene"===t.type?this.el.sceneEl:t.el,console.log(`Reparenting ${e.el.id} from ${objectEl(i).id} to ${objectEl(t).id}`),t.attach(e))}})},561:()=>{AFRAME.registerComponent("thumbstick-states",{schema:{controller:{type:"selector",default:"#lhand"},bindings:{type:"array",default:["none","none","none","none"]},tBindings:{type:"array",default:[]},gBindings:{type:"array",default:[]},tgBindings:{type:"array",default:[]},sensitivity:{type:"number",default:.5}},multiple:!0,init(){this.controller=this.data.controller,this.listeners={thumbstickMoved:this.thumbstickMoved.bind(this),triggerUp:this.triggerUp.bind(this),triggerDown:this.triggerDown.bind(this),gripUp:this.gripUp.bind(this),gripDown:this.gripDown.bind(this)},this.states={gripDown:!1,triggerDown:!1}},update(){this.controller.addEventListener("thumbstickmoved",this.listeners.thumbstickMoved),this.controller.addEventListener("triggerup",this.listeners.triggerUp),this.controller.addEventListener("triggerdown",this.listeners.triggerDown),this.controller.addEventListener("gripup",this.listeners.gripUp),this.controller.addEventListener("gripdown",this.listeners.gripDown),this.updateBindings()},updateBindings(){const t=t=>t.forEach((t=>this.el.removeState(t)));var e;t(this.data.bindings),t(this.data.tBindings),t(this.data.gBindings),t(this.data.tgBindings),e=this.states.triggerDown||this.states.gripDown?this.states.triggerDown&&!this.states.gripDown?t=>this.data.tBindings[t]||this.data.bindings[t]:!this.states.triggerDown&&this.states.gripDown?t=>this.data.gBindings[t]||this.data.bindings[t]:t=>this.data.tgBindings[t]||this.data.gBindings[t]||this.data.tBindings[t]||this.data.bindings[t]:t=>this.data.bindings[t],this.yplus=e(0),this.yminus=e(1),this.xplus=e(2),this.xminus=e(3),console.log(this)},gripDown(t){this.states.gripDown=!0,this.updateBindings()},gripUp(t){this.states.gripDown=!1,this.updateBindings()},triggerDown(t){this.states.triggerDown=!0,this.updateBindings()},triggerUp(t){this.states.triggerDown=!1,this.updateBindings()},thumbstickMoved(t){const e=t.detail.x,i=t.detail.y;Math.abs(e)>this.data.sensitivity?e>0?(this.el.addState(this.xplus),this.el.removeState(this.xminus)):(this.el.addState(this.xminus),this.el.removeState(this.xplus)):(this.el.removeState(this.xplus),this.el.removeState(this.xminus)),Math.abs(i)>this.data.sensitivity?i>0?(this.el.addState(this.yplus),this.el.removeState(this.yminus)):(this.el.addState(this.yminus),this.el.removeState(this.yplus)):(this.el.removeState(this.yplus),this.el.removeState(this.yminus))}})}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var a=e[s]={exports:{}};return t[s](a,a.exports,i),a.exports}AFRAME.components["object-parent"]||i(527),AFRAME.components["thumbstick-states"]||i(561),AFRAME.registerComponent("laser-manipulation",{schema:{rotateRate:{type:"number",default:45},center:{type:"string",default:"center",oneOf:["center","contact"]},grabEvents:{type:"boolean",default:!1},grabEvent:{type:"string",default:"laserGrab"},releaseEvent:{type:"string",default:"laserRelease"},controlMethod:{type:"string",default:"parent",oneOf:["parent","transform"]}},update(t){this.rotateRate=this.data.rotateRate*Math.PI/180},init(){console.assert(this.el.id),this.moveSpeed=3,this.triggerUp=this.triggerUp.bind(this),this.triggerDown=this.triggerDown.bind(this),this.el.addEventListener("triggerup",this.triggerUp),this.el.addEventListener("triggerdown",this.triggerDown),this.grabbedEl=null,this.contactPoint=document.createElement("a-entity"),this.contactPoint.setAttribute("id",`${this.el.id}-contact-point`),this.el.appendChild(this.contactPoint),this.lastContactPointTransform=new THREE.Object3D},assureUsableId(t){t.id?document.getElementById(t.id)!==t&&console.error(`Element ID for ${t.id} does not unambiguously identify it.  Check for duplicate IDs.`):t.setAttribute("id",Math.random().toString(36).slice(10))},getParentEl(t){const e=t.object3D.parent;return"Scene"===e.type?this.el.sceneEl:e.el},triggerDown(t){console.assert(!this.grabbedEl);const e=this.getIntersections(t.target);if(0===e.length)return;const i=this.getRaycastTarget(e[0]),s=this.el.components.raycaster.getIntersection(i);if(this.originalParentEl||(this.originalParentEl=this.getParentEl(i)),this.assureUsableId(this.originalParentEl),"center"===this.data.center){const t=this.contactPoint.object3D.position;i.object3D.getWorldPosition(t),this.contactPoint.object3D.parent.worldToLocal(t)}else{const t=this.el.object3D.worldToLocal(s.point);this.contactPoint.object3D.position.copy(t)}"parent"===this.data.controlMethod?(this.activeControlMethod="parent",i.setAttribute("object-parent","parent",`#${this.el.id}-contact-point`)):(this.activeControlMethod="transform",this.saveContactPointTransform()),this.grabbedEl=i,this.data.grabEvents&&this.grabbedEl.emit(this.data.grabEvent)},triggerUp(){this.grabbedEl&&("parent"===this.activeControlMethod&&this.grabbedEl.setAttribute("object-parent","parent",`#${this.originalParentEl.id}`),this.data.grabEvents&&setTimeout((()=>{this.grabbedEl.emit(this.data.releaseEvent)})),this.grabbedEl=null,this.activeControlMethod="")},getIntersections:t=>t.components.raycaster.intersectedEls,moveOut(t){const e=Math.pow(this.moveSpeed,t/1e3);this.contactPoint.object3D.position.multiplyScalar(e)},getRaycastTarget:t=>t.components["raycast-target"]?t.components["raycast-target"].target:t,saveContactPointTransform(){const t=this.lastContactPointTransform;t.quaternion.identity(),t.position.set(0,0,0),t.scale.set(1,1,1),this.contactPoint.object3D.add(t),this.el.sceneEl.object3D.attach(t)},followContactPoint(){const t=this.grabbedEl.object3D;this.lastContactPointTransform.attach(t),this.saveContactPointTransform(),this.originalParentEl.object3D.attach(t)},tick:function(t,e){"transform"===this.activeControlMethod&&this.followContactPoint(),this.el.is("moving-in")?this.moveOut(-e):this.el.is("moving-out")&&this.moveOut(e),this.el.is("rotating-y-plus")?this.contactPoint.object3D.rotation.y+=e*this.rotateRate/1e3:this.el.is("rotating-y-minus")&&(this.contactPoint.object3D.rotation.y-=e*this.rotateRate/1e3),this.el.is("rotating-x-plus")?this.contactPoint.object3D.rotation.x+=e*this.rotateRate/1e3:this.el.is("rotating-x-minus")&&(this.contactPoint.object3D.rotation.x-=e*this.rotateRate/1e3)}})})();