/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("if (!AFRAME.components['polygon-wireframe']) __webpack_require__(/*! aframe-polygon-wireframe */ \"./node_modules/aframe-polygon-wireframe/index.js\")\r\n__webpack_require__(/*! ./src/socket-system.js */ \"./src/socket-system.js\")\r\n__webpack_require__(/*! ./src/socket-fabric.js */ \"./src/socket-fabric.js\")\r\n__webpack_require__(/*! ./src/socket.js */ \"./src/socket.js\")\r\n__webpack_require__(/*! ./src/plug.js */ \"./src/plug.js\")\n\n//# sourceURL=webpack://aframe-plug-socket/./index.js?");

/***/ }),

/***/ "./node_modules/aframe-polygon-wireframe/index.js":
/*!********************************************************!*\
  !*** ./node_modules/aframe-polygon-wireframe/index.js ***!
  \********************************************************/
/***/ (() => {

eval("AFRAME.registerComponent(\"polygon-wireframe\", {\r\n\r\n    schema: {\r\n        color: { type: 'color', default: 'grey' },\r\n        dashed: { type: 'boolean', default: false },\r\n        dashSize: { type: 'number', default: 3 },\r\n        gapSize: { type: 'number', default: 1 },\r\n        dashScale: { type: 'number', default: 30 },\r\n        onTop: {type: 'boolean', default: false}\r\n    },\r\n\r\n    init() {\r\n      const baseGeometry = this.el.getObject3D('mesh').geometry\r\n      if (!baseGeometry) {\r\n          console.warn(\"polygon-wireframe: no base geometry found\")\r\n      };\r\n\r\n      this.edges = new THREE.EdgesGeometry( baseGeometry );\r\n    },\r\n\r\n    update() {\r\n\r\n        const oldMaterial = this.material\r\n        const oldLine = this.line\r\n\r\n        if (!this.data.dashed) {\r\n            this.material = new THREE.LineBasicMaterial( { color: this.data.color } )\r\n        }\r\n        else {\r\n            this.material = new THREE.LineDashedMaterial( { color: this.data.color,\r\n                                                            dashSize: this.data.dashSize,\r\n                                                            gapSize: this.data.gapSize,\r\n                                                            scale: this.data.dashScale } )\r\n        }\r\n\r\n        if (this.data.onTop) {\r\n          const material = this.material\r\n          material.depthWrite = false\r\n          material.depthTest = false\r\n          material.toneMapped = false\r\n          material.transparent = true\r\n        }\r\n        \r\n        this.line = new THREE.LineSegments( this.edges, this.material );\r\n        this.line.computeLineDistances();\r\n\r\n        this.el.object3D.add( this.line );\r\n\r\n        this.el.getObject3D('mesh').visible = false;\r\n\r\n        // dispose of old material & line\r\n        if (oldMaterial) {\r\n          oldMaterial.dispose()\r\n        }\r\n        if (oldLine) {\r\n          oldLine.removeFromParent()\r\n        }\r\n    }\r\n})\n\n//# sourceURL=webpack://aframe-plug-socket/./node_modules/aframe-polygon-wireframe/index.js?");

/***/ }),

/***/ "./src/plug.js":
/*!*********************!*\
  !*** ./src/plug.js ***!
  \*********************/
/***/ (() => {

eval("AFRAME.registerComponent('plug', {\r\n\r\n  init() {\r\n    this.el.setAttribute('socket', {type: 'plug'})\r\n  }\r\n})\n\n//# sourceURL=webpack://aframe-plug-socket/./src/plug.js?");

/***/ }),

/***/ "./src/socket-fabric.js":
/*!******************************!*\
  !*** ./src/socket-fabric.js ***!
  \******************************/
/***/ (() => {

eval("AFRAME.registerComponent('socket-fabric', {\r\n\r\n  schema: {\r\n    snap: {type: 'string', oneOf: ['auto', 'events'], default: 'auto'}\r\n  },\r\n\r\n  init() {\r\n\r\n    this.bindingRequest = this.bindingRequest.bind(this)\r\n    this.el.addEventListener('binding-request', this.bindingRequest)\r\n\r\n    this.bindingCancel = this.bindingCancel.bind(this)\r\n    this.el.addEventListener('binding-cancel', this.bindingCancel)\r\n\r\n    // Temporary solution to break bonds when brick is selected.\r\n    // !! Need to figure out correct mechanism to use here.\r\n    this.breakBonds = this.breakBonds.bind(this)\r\n    this.el.addEventListener('mouseGrab', this.breakBonds)\r\n    this.bondBroken = false\r\n\r\n    this.requests = []\r\n    this.prevRequestsLength = 0\r\n\r\n    this.transform = new THREE.Object3D()\r\n    this.identityTransform = new THREE.Object3D()\r\n    this.eventData = {worldTransform: this.transform}\r\n  },\r\n\r\n  bindingRequest(evt) {\r\n\r\n    source = evt.target\r\n    sourceNode = source.components['socket']\r\n    target = sourceNode.peer\r\n\r\n    if (!this.requests.includes(sourceNode)) {\r\n      this.requests.push(sourceNode)\r\n    }\r\n\r\n    // processing of requests is done on tick().  We don't want to act yet - if entities are in motion\r\n    // give all entities a chance to catch up with each other before analysing, else the first to move would be \r\n    // designated as inconsistent with the others & discarded.\r\n  },\r\n\r\n  bindingCancel(evt) {\r\n\r\n    source = evt.target\r\n    sourceNode = source.components['socket']\r\n    this.disposeOfRequest(sourceNode, false)\r\n  },\r\n\r\n  computeFabricAdjustmentTransforms() {\r\n\r\n    const worldSpaceSocketPosition = new THREE.Vector3()\r\n    const worldSpaceFabricPosition = new THREE.Vector3()\r\n    const socketOffset = new THREE.Vector3()\r\n    const adjustmentVector = new THREE.Vector3()\r\n\r\n    return (() => {\r\n\r\n      // adjustmentTransform is the transform that would move one plug or socket to the correct position in world space.\r\n      // we need to compute fabric Adjustment Transform, which would move the entire fabric to the correct position.\r\n\r\n      this.requests.forEach((request) => {\r\n        \r\n        const fabricAdjustmentTransform = request.fabricAdjustmentTransform\r\n        const socketAdjustmentTransform = request.adjustmentTransform\r\n        fabricAdjustmentTransform.scale.set(1, 1, 1)\r\n\r\n        //console.log(\"Socket adjustment transform: position: \", socketAdjustmentTransform.position)\r\n        //console.log(\"Socket adjustment transform: quaternion: \", socketAdjustmentTransform.quaternion)\r\n        \r\n        const quaternion = fabricAdjustmentTransform.quaternion\r\n        quaternion.copy(socketAdjustmentTransform.quaternion)\r\n\r\n\r\n        worldSpaceSocketPosition.copy(request.el.object3D.position)\r\n        request.el.object3D.parent.localToWorld(worldSpaceSocketPosition)\r\n        \r\n        worldSpaceFabricPosition.copy(this.el.object3D.position)\r\n        this.el.object3D.parent.localToWorld(worldSpaceFabricPosition)\r\n\r\n        socketOffset.subVectors(worldSpaceSocketPosition, worldSpaceFabricPosition)\r\n\r\n        const position = fabricAdjustmentTransform.position\r\n        // translation required for socket to reach socket\r\n        position.copy(socketAdjustmentTransform.position)\r\n\r\n        // minus socket->fabric translation post-quaternion\r\n        adjustmentVector.copy(socketOffset)\r\n        adjustmentVector.applyQuaternion(fabricAdjustmentTransform.quaternion)\r\n        position.sub(adjustmentVector)\r\n\r\n        // plus socket->fabric translation pre-quaternion\r\n        position.add(socketOffset)\r\n\r\n        //console.log(\"World Space Fabric adjustment transform: position: \", fabricAdjustmentTransform.position)\r\n        //console.log(\"World Space Fabric adjustment transform: quaternion: \", fabricAdjustmentTransform.quaternion)\r\n\r\n      })\r\n    })()\r\n  },\r\n\r\n  buildConsensus() {\r\n\r\n    const countMatchingRequests = (request) => \r\n      (this.requests.filter((item) => this.compareTransforms(request.fabricAdjustmentTransform,\r\n                                                             item.fabricAdjustmentTransform)).length)\r\n\r\n    const matchCounts = this.requests.map((request) => countMatchingRequests(request))\r\n    \r\n    const maxMatches = Math.max(...matchCounts)\r\n    const maxMatchesIndex = matchCounts.indexOf(maxMatches)\r\n\r\n    const usableRequest = this.requests[maxMatchesIndex]\r\n\r\n    const disposableRequests = this.requests.filter((item) => !this.compareTransforms(usableRequest.fabricAdjustmentTransform,\r\n                                                                                      item.fabricAdjustmentTransform))\r\n    disposableRequests.forEach((request) => {\r\n      this.disposeOfRequest(request, true)\r\n    })\r\n\r\n    if (!this.requests.length) {\r\n      console.error(\"All requests disposed of:\", disposableRequests)\r\n    }\r\n\r\n    // this.requests now contains only usable requests, that are consistent with each other.\r\n\r\n    //console.log(\"Requests\", this.requests)\r\n  },\r\n\r\n  disposeOfRequest(request, failureFlag) {\r\n\r\n    if (failureFlag) {\r\n      request.el.emit('binding-failed')\r\n    }\r\n    \r\n    const index = this.requests.indexOf(request)\r\n    this.requests.splice(index, 1)\r\n  \r\n  },\r\n\r\n  compareTransforms(a, b, precision = 6) {\r\n\r\n    if (a === b) return true\r\n\r\n    const compare = (x, y) => (Math.abs(x - y) < Math.pow(10, -precision))\r\n\r\n    const ap = a.position\r\n    const bp = b.position\r\n    if (!compare(ap.x, bp.x)) return false\r\n    if (!compare(ap.y, bp.y)) return false\r\n    if (!compare(ap.z, bp.z)) return false\r\n\r\n    const aq = a.quaternion\r\n    const bq = b.quaternion\r\n    if (!compare(aq.x, bq.x)) return false\r\n    if (!compare(aq.y, bq.y)) return false\r\n    if (!compare(aq.z, bq.z)) return false\r\n    if (!compare(aq.w, bq.w)) return false\r\n  \r\n    return true\r\n  },\r\n\r\n  tick() {\r\n\r\n    if (this.requests.length) {\r\n      \r\n      this.computeFabricAdjustmentTransforms()\r\n\r\n      // dispose of any requests that are inconsistent with other requests.\r\n      this.buildConsensus()\r\n\r\n      // Now all requests are consistent, so fine to pick any of them to apply.\r\n      // !! SHOULD RENAME THIS FUNCTION - DOESN'T ALWAYS RESULT IN MOVEMENT\r\n      this.moveTowards(this.requests[0].fabricAdjustmentTransform)\r\n    }\r\n    else {\r\n      if (this.prevRequestsLength) {\r\n        // just moved from having some requests, to having none.\r\n        this.el.emit('snapEnd')\r\n      }\r\n    }\r\n\r\n    // Record number of requests, for review next tick.\r\n    this.prevRequestsLength = this.requests.length\r\n  },\r\n\r\n  // !! SHOULD RENAME THIS FUNCTION - DOESN'T ALWAYS RESULT IN MOVEMENT\r\n  moveTowards(object) {\r\n\r\n    if (this.data.snap === 'auto') {\r\n      // for now, just snap to position \r\n      // - in future, will be option to do this asynchronously via physics system.\r\n\r\n      const scene = this.el.sceneEl.object3D\r\n      const parent = this.el.object3D.parent\r\n\r\n      // transform is specified in world space, so switch to world space to apply it.\r\n      scene.attach(this.el.object3D)\r\n      this.el.object3D.position.add(object.position)\r\n      this.el.object3D.quaternion.premultiply(object.quaternion)\r\n      parent.attach(this.el.object3D)\r\n\r\n      this.requests.forEach((request) => {\r\n        this.requestCompleted(request)\r\n      })\r\n\r\n      // !! Will need to do better when objects are moving - need to mediate between\r\n      // whatever is controlling movement (animation etc.) and this change to position.\r\n      // An additional Objet3D needed to track the offset transform?\r\n      // Details to be worked out...\r\n    }\r\n    else {\r\n\r\n      let alreadyInPosition = false\r\n      if (!this.bondsBroken && this.compareTransforms(this.identityTransform, object)) {\r\n        // requested transform is the identity (no movement)\r\n        alreadyInPosition = true\r\n      }\r\n\r\n      // signal events, to allow snap to be controlled externally.\r\n      const transform = this.transform\r\n      transform.position.copy(this.el.object3D.position)\r\n      transform.quaternion.copy(this.el.object3D.quaternion)\r\n      transform.scale.copy(this.el.object3D.scale)\r\n\r\n      this.el.object3D.parent.add(transform)\r\n      this.el.sceneEl.object3D.attach(transform)\r\n\r\n      transform.quaternion.premultiply(object.quaternion)\r\n      transform.position.add(object.position)\r\n\r\n      //console.log(\"World transform: position: \", transform.position)\r\n      //console.log(\"World transform: quaternion: \", transform.quaternion)\r\n\r\n      this.el.emit('snapStart', this.eventData)\r\n\r\n      if (alreadyInPosition) {\r\n        this.allRequestsCompleted()\r\n      }\r\n      else {\r\n        this.el.addEventListener('snappedTo', this.allRequestsCompleted.bind(this))\r\n      }\r\n    }\r\n  },\r\n\r\n  allRequestsCompleted() {\r\n    this.requests.forEach((request) => {\r\n      this.requestCompleted(request)\r\n    })\r\n  },\r\n  \r\n  requestCompleted(request) {\r\n\r\n    request.el.emit('binding-success')\r\n\r\n    this.disposeOfRequest(request, false)\r\n    this.bondsBroken = false\r\n  },\r\n\r\n  breakBonds() {\r\n    this.bondsBroken = true\r\n\r\n    const sockets = this.el.querySelectorAll('[socket]')\r\n\r\n    sockets.forEach((socket) => {\r\n      const socketComponent = socket.components.socket\r\n      socketComponent.bindingBroken()\r\n    })\r\n  }\r\n})\n\n//# sourceURL=webpack://aframe-plug-socket/./src/socket-fabric.js?");

/***/ }),

/***/ "./src/socket-system.js":
/*!******************************!*\
  !*** ./src/socket-system.js ***!
  \******************************/
/***/ (() => {

eval("AFRAME.registerSystem('socket', {\r\n\r\n  schema: {\r\n    snapDistance: {default: 0.1},\r\n\r\n    // rotation in degrees by which a plug can snap to this socket.\r\n    snapRotation: {default: 30},\r\n\r\n    // degrees between positions at which the socket & plug can be fixed (y-axis only)\r\n    rotationIncrement: { default: 90 },\r\n\r\n    // debug visualization\r\n    debug: { default: false }\r\n  },\r\n\r\n  init() {\r\n\r\n    this.freeSocketObjects = []\r\n    this.freePlugObjects = []\r\n    this.freeSocketsSortedByX = []\r\n    this.freeSocketsSortedByY = []\r\n    this.freeSocketsSortedByZ = []\r\n\r\n    this.upVector = new THREE.Vector3(0, 1, 0)\r\n    this.identityQuaternion = new THREE.Quaternion()\r\n    this.bestQuaternion = new THREE.Quaternion()\r\n    this.tempQuaternion = new THREE.Quaternion()\r\n\r\n    this.testPlug = new THREE.Object3D()\r\n    \r\n  },\r\n\r\n  update() {\r\n\r\n    this.snapRotation = THREE.MathUtils.degToRad(this.data.snapRotation)\r\n\r\n    // build an array of quaternions representing angles to test for socket/plug matches,\r\n    // based on the supplied config.\r\n    this.angleIncrementQuaternion = new THREE.Quaternion()\r\n    this.angleIncrementQuaternion.setFromAxisAngle(this.upVector, THREE.MathUtils.degToRad(this.data.rotationIncrement))\r\n  },\r\n\r\n  addFreePlug(plug) {\r\n    if (!this.freePlugObjects.includes(plug)) {\r\n      this.freePlugObjects.push(plug)\r\n    }\r\n  },\r\n\r\n  removeFreePlug(plug) {\r\n    const index = this.freePlugObjects.indexOf(plug)\r\n\r\n    if (index > -1) {\r\n      this.freePlugObjects.splice(index, 1)\r\n    }\r\n  },\r\n\r\n  addFreeSocket(socket) {\r\n    if (!this.freeSocketObjects.includes(socket)) {\r\n      this.freeSocketObjects.push(socket)\r\n    }\r\n  },\r\n\r\n  removeFreeSocket(socket) {\r\n    const index = this.freeSocketObjects.indexOf(socket)\r\n\r\n    if (index > -1) {\r\n      this.freeSocketObjects.splice(index, 1)\r\n    }\r\n  },\r\n\r\n  prepareSocketsForSearch() {\r\n    const sortByX = (o1, o2) => o1.position.x - o2.position.x\r\n    const sortByY = (o1, o2) => o1.position.y - o2.position.y\r\n    const sortByZ = (o1, o2) => o1.position.z - o2.position.z\r\n\r\n    // copy & sort arrays - would be nice to rework to create less GC, but elsewhere we also use\r\n    // slice & filter which generate new arrays.\r\n    this.freeSocketsSortedByX = [...this.freeSocketObjects].sort(sortByX)\r\n    this.freeSocketsSortedByY = [...this.freeSocketObjects].sort(sortByY)\r\n    this.freeSocketsSortedByZ = [...this.freeSocketObjects].sort(sortByZ)\r\n  },\r\n\r\n  findNearbySockets(plug) {\r\n\r\n    const tolerance = this.data.snapDistance\r\n    const plugPosition = plug.position\r\n\r\n    const xCandidates = this.findCandidates(this.freeSocketsSortedByX, 'x', plugPosition.x, tolerance);\r\n    const yCandidates = this.findCandidates(this.freeSocketsSortedByY, 'y', plugPosition.y, tolerance);\r\n    const zCandidates = this.findCandidates(this.freeSocketsSortedByZ, 'z', plugPosition.z, tolerance);\r\n\r\n    const intersectArrays = (a1, a2) => {\r\n      const intersect = a1.filter((c1) => a2.find((c2) => c1 === c2));\r\n      return intersect;\r\n    };\r\n  \r\n    const xyCandidates = intersectArrays(xCandidates, yCandidates);\r\n    const candidates = intersectArrays(xyCandidates, zCandidates);\r\n\r\n    const toleranceSq = tolerance * tolerance\r\n    \r\n    const checkDistance = (o) => {\r\n      if (o.position.distanceToSquared(plugPosition) >= toleranceSq) return false\r\n      return true\r\n    }\r\n    return candidates.filter(checkDistance)\r\n  },\r\n\r\n  findCandidates(array, property, value, tolerance) {\r\n\r\n    if (array.length === 0) return array\r\n\r\n    const firstIndex = this.findInArraySegment(array, property, value - tolerance, 0, array.length - 1, true);\r\n    const lastIndex = this.findInArraySegment(array, property, value + tolerance, 0, array.length - 1, false);\r\n\r\n    return array.slice(firstIndex, lastIndex + 1);\r\n  },\r\n\r\n  // Binary Search utility function.\r\n  // array: the array to search.  An array of Object3Ds.\r\n  // property: one of \"x\", \"y\" or \"z\" - indicates which part of the Object3D's position to check.\r\n  // value: the value to search for\r\n  // start: the start position to search from\r\n  // end: the end position to search to\r\n  // forward: true to search from beginning (lowest matching value),\r\n  // false to search from the end (highest matching value_)\r\n  findInArraySegment(array, property, value, start, end, forward) {\r\n    //console.log(`Searching for ${value} in array, between indices ${start} and ${end}`);\r\n    //console.log(`Array segment is: ${array.slice(start, end)}`);\r\n\r\n    // Final match\r\n    if (start === end || start > end) {\r\n      //console.log(`found at ${start}`)\r\n      if (array[start].position[property] > value && forward) {\r\n        return start - 1;\r\n      } else {\r\n        return start;\r\n      }\r\n    }\r\n\r\n    // Find the middle index\r\n    const mid = Math.floor((start + end) / 2);\r\n\r\n    // If element at mid is greater than x\r\n    // (or it matches & we are searching forwards).\r\n    // search in the left half of mid\r\n    const midValue = array[mid].position[property]\r\n    if (midValue > value || (midValue === value && forward)) {\r\n      return this.findInArraySegment(array, property, value, start, mid - 1);\r\n    }\r\n    // If element at mid is smaller than x,\r\n    // search in the right half of mid\r\n    else {\r\n      return this.findInArraySegment(array, property, value, mid + 1, end);\r\n    }\r\n  },\r\n\r\n  tick() {\r\n    // search for free plugs near to free sockets\r\n    this.prepareSocketsForSearch()\r\n\r\n    const plugs = this.freePlugObjects\r\n    const length = plugs.length\r\n\r\n    for (let ii = 0; ii < length; ii++) {\r\n      const plug = plugs[ii]\r\n      const plugComponent = plug.el.components.socket\r\n      \r\n      adjustmentTransform = plugComponent.adjustmentTransform\r\n      const socket = this.matchPlugToSocket(plug, adjustmentTransform)\r\n\r\n      if (socket) {\r\n        \r\n        const socketComponent = socket.el.components.socket\r\n\r\n        if (this.data.debug) {\r\n\r\n          console.log(\"Matched plug: \", ii, plug.uuid, \"to socket\", socket.uuid)\r\n          console.log(\"Plug WP:\", plugComponent.worldSpaceObject.position)\r\n          console.log(\"Plug WQ:\", plugComponent.worldSpaceObject.quaternion)\r\n          \r\n        \r\n          console.log(\"Socket WP:\", socketComponent.worldSpaceObject.position)\r\n          console.log(\"Socket WQ:\", socketComponent.worldSpaceObject.quaternion)\r\n\r\n          console.log(\"Adjustment Transform P:\", adjustmentTransform.position)\r\n          console.log(\"Adjustment Transform Q:\", adjustmentTransform.quaternion)\r\n        }\r\n\r\n        const socketInertia = socketComponent.getInertia()\r\n        const plugInertia = plugComponent.getInertia()\r\n\r\n        if (plugInertia <= socketInertia) {\r\n          \r\n          plugComponent.suggestPeer(socket)\r\n        }\r\n        else {\r\n          socketComponent.adjustmentTransform.position.copy(adjustmentTransform.position).multiplyScalar(-1)\r\n          socketComponent.adjustmentTransform.quaternion.copy(adjustmentTransform.quaternion).invert()\r\n          socketComponent.suggestPeer(plug)\r\n        }\r\n      }\r\n      else {\r\n        // plug no longer connects to any socket.\r\n        plugComponent.cancelPeer()\r\n      }\r\n    }\r\n  },\r\n\r\n  // params:\r\n  // plug to match to a socket\r\n  // adjustmentTransform - an object3D, whose transform will be set to the \r\n  //                adjustment required from the plug transform to the chosen socket's transform.\r\n  //                all in world space.\r\n  matchPlugToSocket(plug, adjustmentTransform) {\r\n\r\n    let bestSocket = null\r\n    let bestDistanceSq = Infinity\r\n    const sockets = this.findNearbySockets(plug)\r\n\r\n    if (sockets.length < 1) return null\r\n\r\n    sockets.forEach((socket) => {\r\n\r\n      // don't consider sockets in the same fabric as the plug.\r\n      if (socket.el.components.socket.fabric === plug.el.components.socket.fabric) return null\r\n\r\n      // set testPlug position to match position of socket,\r\n      // but as a child of the plug.\r\n      this.testPlug.matrix.identity()\r\n      this.testPlug.matrix.decompose(this.testPlug.position,\r\n                                     this.testPlug.quaternion,\r\n                                     this.testPlug.scale)\r\n      socket.add(this.testPlug)\r\n      plug.attach(this.testPlug)\r\n\r\n      let bestAngle = Infinity\r\n\r\n      for (let ii = 0; ii < 360; ii += this.data.rotationIncrement) {\r\n\r\n        // standardize an angle to range -PI to +PI\r\n        const standardizeAngle = (angle) => angle - (2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI)))\r\n\r\n        const rawAngle = this.testPlug.quaternion.angleTo(this.identityQuaternion)\r\n        const absAngle = Math.abs(standardizeAngle(rawAngle))\r\n\r\n        if (absAngle < bestAngle) {\r\n          bestAngle = absAngle\r\n          this.bestQuaternion.copy(this.testPlug.quaternion)\r\n        }\r\n\r\n        this.testPlug.quaternion.multiply(this.angleIncrementQuaternion)\r\n      }\r\n\r\n      if (bestAngle < this.snapRotation) {\r\n        // angle small enough to qualify\r\n\r\n        const distanceSq = this.testPlug.position.lengthSq()\r\n        \r\n        if (distanceSq < bestDistanceSq) {\r\n          bestDistanceSq = distanceSq\r\n          bestSocket = socket\r\n\r\n          plugInverseQuaternion = this.tempQuaternion\r\n          plugInverseQuaternion.copy(plug.quaternion).invert()\r\n\r\n          adjustmentTransform.position.subVectors(socket.position, plug.position)\r\n          adjustmentTransform.quaternion.copy(this.bestQuaternion)\r\n                              .premultiply(plug.quaternion)\r\n                             .multiply(plugInverseQuaternion)\r\n\r\n          //console.log(\"adjustmentTransform position: \", adjustmentTransform.position)\r\n          //console.log(\"adjustmentTransform quaternion: \", adjustmentTransform.quaternion)\r\n        }\r\n      }\r\n    })\r\n\r\n    return bestSocket\r\n  }\r\n})\r\n\n\n//# sourceURL=webpack://aframe-plug-socket/./src/socket-system.js?");

/***/ }),

/***/ "./src/socket.js":
/*!***********************!*\
  !*** ./src/socket.js ***!
  \***********************/
/***/ (() => {

eval("const PS_STATE_FREE = 0\r\nconst PS_STATE_BINDING = 1\r\nconst PS_STATE_BOUND = 2\r\nconst PS_STATE_TARGET = 3\r\nconst PS_STATE_FAILED = 3\r\n\r\nAFRAME.registerComponent('socket', {\r\n\r\n  schema: {\r\n    type: { type: 'string', default: 'socket', oneOf: ['socket', 'plug']}\r\n  },\r\n\r\n  init() {\r\n    this.bindingState = PS_STATE_FREE\r\n    this.adjustmentTransform = new THREE.Object3D()\r\n    this.fabricAdjustmentTransform = new THREE.Object3D()\r\n    \r\n    this.fabric = this.findFabric()\r\n    this.peer = null\r\n    this.isSocket = (this.data.type === 'socket')\r\n\r\n    // worldSpaceObject is a world-space representation of the transform\r\n    // of this socket.  Used for matching sockets in space.\r\n    this.worldSpaceObject = new THREE.Object3D\r\n    this.worldSpaceObject.el = this.el\r\n    this.updateWorldSpaceObject()\r\n    this.el.sceneEl.object3D.add(this.worldSpaceObject)\r\n    \r\n    this.addToSystem()\r\n\r\n    this.bindingFailed = this.bindingFailed.bind(this)\r\n    this.bindingSuccess = this.bindingSuccess.bind(this)\r\n    this.el.addEventListener('binding-failed', this.bindingFailed)\r\n    this.el.addEventListener('binding-success', this.bindingSuccess)\r\n\r\n    if (this.system.data.debug) {\r\n      this.debugVisual = document.createElement('a-cylinder')\r\n      this.updateDebugVisual()\r\n      this.el.appendChild(this.debugVisual)\r\n    }\r\n\r\n    this.debugDistanceVector = new THREE.Vector3()\r\n  },\r\n\r\n  findFabric() {\r\n    \r\n    function findFabricAbove(el, sceneEl) {\r\n      if (!el.parentEl === sceneEl) return null\r\n      if (el.parentEl?.getAttribute('socket-fabric') !== null) return el.parentEl\r\n      return findFabricAbove(el.parentEl, sceneEl)\r\n    }\r\n\r\n    return findFabricAbove(this.el, this.el.sceneEl)\r\n  },\r\n\r\n  updateDebugVisual() {\r\n\r\n    if (!this.debugVisual) return\r\n\r\n    let color, radius\r\n\r\n    switch (this.bindingState) {\r\n      case PS_STATE_FREE:\r\n        color = (this.data.type === 'socket') ? '#55f' : '#f55'\r\n        break\r\n      \r\n      case PS_STATE_BINDING:\r\n      case PS_STATE_BOUND:\r\n      case PS_STATE_TARGET:\r\n        color = (this.data.type === 'socket') ? '#5ff' : '#ff5'\r\n        break\r\n\r\n      default:\r\n        console.error('unexpected state', this.bindingState)\r\n        break\r\n    }\r\n    \r\n    radius = (this.data.type === 'socket') ? 0.1 : 0.08\r\n    \r\n    const sides = 360 / this.system.data.rotationIncrement\r\n\r\n    this.debugVisual.setAttribute('radius', radius)\r\n    this.debugVisual.setAttribute('height', 0.05)\r\n    this.debugVisual.setAttribute('segments-height', 1)\r\n    this.debugVisual.setAttribute('segments-radial', sides)\r\n    this.debugVisual.setAttribute('polygon-wireframe', {color: color, onTop: true})\r\n\r\n  },\r\n\r\n  updateWorldSpaceObject() {\r\n\r\n    // don't just use Object3D.attach for performance reasons.\r\n    // however we can improve performance further by making this update in onBeforeRender()\r\n    // when world matrices are computed anyway...\r\n    // Also consider replacing worldSpaceObject with just a Matrix4 ( to avoid cost of decompose)\r\n    const wso = this.worldSpaceObject\r\n    this.el.object3D.updateWorldMatrix( true, false );\r\n    wso.matrix.copy(this.el.object3D.matrixWorld)\r\n    wso.matrix.decompose(wso.position,\r\n                         wso.quaternion,\r\n                         wso.scale)\r\n  },\r\n\r\n  addToSystem() {\r\n\r\n    if (this.isSocket) {\r\n      this.system.addFreeSocket(this.worldSpaceObject)\r\n    }\r\n    else {\r\n      this.system.addFreePlug(this.worldSpaceObject)\r\n    }\r\n  },\r\n\r\n  removeFromSystem() {\r\n\r\n    if (this.isSocket) {\r\n      this.system.removeFreeSocket(this.worldSpaceObject)\r\n    }\r\n    else {\r\n      this.system.removeFreePlug(this.worldSpaceObject)\r\n    }\r\n  },\r\n\r\n  getInertia() {\r\n\r\n    // Temporary hack to promote snapping of entities that are being manipulated.\r\n    // !! Needs to be made more generic & less hacky!\r\n    const dynamicSnap = this.el.parentEl.components['dynamic-snap']\r\n    if (dynamicSnap?.diverged) {\r\n      return 0.1\r\n    }\r\n    else {\r\n      return 1\r\n    }\r\n  },\r\n\r\n  suggestPeer(peer) {\r\n\r\n    this.bindingState = PS_STATE_BINDING\r\n    this.peer = peer\r\n    const peerComponent = peer.el.components.socket\r\n    peerComponent.trackPeer(this.el.object3D)\r\n\r\n    // adjustment transform already set up when matching sockets.\r\n\r\n    this.el.emit('binding-request')\r\n  },\r\n\r\n  trackPeer(peer) {\r\n\r\n    this.bindingState = PS_STATE_TARGET\r\n    this.peer = peer\r\n\r\n  },\r\n\r\n  untrackPeer(peer) {\r\n\r\n    this.bindingState = PS_STATE_FREE\r\n    this.peer = null\r\n\r\n  },\r\n\r\n  cancelPeer() {\r\n    if (this.peer) {\r\n\r\n      if ((this.bindingState === PS_STATE_BINDING) || \r\n          (this.bindingState === PS_STATE_BOUND)) {\r\n\r\n        this.el.emit('binding-cancel')\r\n      }\r\n      else if (this.bindingState === PS_STATE_TARGET) {\r\n        this.peer.el.emit('binding-cancel')\r\n      }\r\n      const peerComponent = this.peer.el.components.socket\r\n      peerComponent.untrackPeer()\r\n      this.untrackPeer()\r\n    }\r\n\r\n    this.bindingState = PS_STATE_FREE\r\n  },\r\n  \r\n  bindingFailed() {\r\n    this.bindingState = PS_STATE_FAILED\r\n    this.cancelPeer()\r\n  },\r\n\r\n  bindingSuccess() {\r\n\r\n    if (!this.peer) return\r\n\r\n    this.bindingState = PS_STATE_BOUND\r\n    this.removeFromSystem()\r\n    const peerComponent = this.peer.el.components.socket\r\n    peerComponent.removeFromSystem()\r\n\r\n    if (this.system.data.debug) {\r\n      this.updateWorldSpaceObject()\r\n      peerComponent.updateWorldSpaceObject()\r\n      this.debugDistanceVector.subVectors(this.worldSpaceObject.position, this.peer.el.components.socket.worldSpaceObject.position)\r\n      console.log(\"Binding Success: socket distance:\", this.debugDistanceVector.length().toFixed(10))\r\n\r\n      if (Math.abs(this.debugDistanceVector.length()) > 0.001) {\r\n        console.error(\"Inaccurate binding\")\r\n        console.log(\"This position:\", this.worldSpaceObject.position)\r\n        console.log(\"Peer position:\", this.peer.el.components.socket.worldSpaceObject.position)\r\n        \r\n      }\r\n    }\r\n  },\r\n\r\n  bindingBroken() {\r\n\r\n    if (!this.peer) return\r\n\r\n    this.addToSystem()\r\n    const peerComponent = this.peer.el.components.socket\r\n    peerComponent.addToSystem()\r\n    this.cancelPeer()\r\n  },\r\n\r\n  tick() {\r\n\r\n    this.updateWorldSpaceObject()\r\n    this.updateDebugVisual()\r\n\r\n    // Unclear this is needed... moe thought needed about case where sockets don't bind to plug immediately\r\n    // best to work this out when integrating with physics / manipulation controls...\r\n    /// !! WORKING ON THIS\r\n    // !! WRONG place to do this - can't factor in e.g. rotation preference.\r\n    // need to continue socket bdingin process while in state \"binding...\"\r\n    /*\r\n    if (this.bindingState === PS_STATE_BINDING) {\r\n      // update target position.\r\n      const node = this.el.object3D\r\n      const peer = this.peer\r\n\r\n      this.adjustmentTransform.matrix.identity()\r\n      this.adjustmentTransform.matrix.decompose(this.adjustmentTransform.position,\r\n                                             this.adjustmentTransform.quaternion,\r\n                                             this.adjustmentTransform.scale)\r\n      peer.add(this.adjustmentTransform)\r\n      node.attach(this.adjustmentTransform)\r\n\r\n      this.el.emit('binding-request')\r\n    }\r\n    */\r\n  }\r\n\r\n})\n\n//# sourceURL=webpack://aframe-plug-socket/./src/socket.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;